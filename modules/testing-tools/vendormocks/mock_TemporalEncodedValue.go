// Code generated by mockery v2.43.2. DO NOT EDIT.

package vendormocks

import mock "github.com/stretchr/testify/mock"

// MockTemporalEncodedValue is an autogenerated mock type for the EncodedValue type
type MockTemporalEncodedValue struct {
	mock.Mock
}

type MockTemporalEncodedValue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemporalEncodedValue) EXPECT() *MockTemporalEncodedValue_Expecter {
	return &MockTemporalEncodedValue_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: valuePtr
func (_m *MockTemporalEncodedValue) Get(valuePtr interface{}) error {
	ret := _m.Called(valuePtr)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(valuePtr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalEncodedValue_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTemporalEncodedValue_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - valuePtr interface{}
func (_e *MockTemporalEncodedValue_Expecter) Get(valuePtr interface{}) *MockTemporalEncodedValue_Get_Call {
	return &MockTemporalEncodedValue_Get_Call{Call: _e.mock.On("Get", valuePtr)}
}

func (_c *MockTemporalEncodedValue_Get_Call) Run(run func(valuePtr interface{})) *MockTemporalEncodedValue_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockTemporalEncodedValue_Get_Call) Return(_a0 error) *MockTemporalEncodedValue_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalEncodedValue_Get_Call) RunAndReturn(run func(interface{}) error) *MockTemporalEncodedValue_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HasValue provides a mock function with given fields:
func (_m *MockTemporalEncodedValue) HasValue() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasValue")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTemporalEncodedValue_HasValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasValue'
type MockTemporalEncodedValue_HasValue_Call struct {
	*mock.Call
}

// HasValue is a helper method to define mock.On call
func (_e *MockTemporalEncodedValue_Expecter) HasValue() *MockTemporalEncodedValue_HasValue_Call {
	return &MockTemporalEncodedValue_HasValue_Call{Call: _e.mock.On("HasValue")}
}

func (_c *MockTemporalEncodedValue_HasValue_Call) Run(run func()) *MockTemporalEncodedValue_HasValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemporalEncodedValue_HasValue_Call) Return(_a0 bool) *MockTemporalEncodedValue_HasValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalEncodedValue_HasValue_Call) RunAndReturn(run func() bool) *MockTemporalEncodedValue_HasValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemporalEncodedValue creates a new instance of MockTemporalEncodedValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemporalEncodedValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemporalEncodedValue {
	mock := &MockTemporalEncodedValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
