// Code generated by mockery v2.43.2. DO NOT EDIT.

package workflowclient

import (
	context "context"

	deephealth_v1 "github.com/pseudo-su/golang-temporal-service-template/modules/service-pkg/deephealth/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkflowClientInterface is an autogenerated mock type for the WorkflowClientInterface type
type MockWorkflowClientInterface struct {
	mock.Mock
}

type MockWorkflowClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflowClientInterface) EXPECT() *MockWorkflowClientInterface_Expecter {
	return &MockWorkflowClientInterface_Expecter{mock: &_m.Mock}
}

// RunDeepHealthCheck provides a mock function with given fields: ctx, in
func (_m *MockWorkflowClientInterface) RunDeepHealthCheck(ctx context.Context, in *RunDeepHealthCheckInput) (*deephealth_v1.DeepHealthCheckResponse, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for RunDeepHealthCheck")
	}

	var r0 *deephealth_v1.DeepHealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RunDeepHealthCheckInput) (*deephealth_v1.DeepHealthCheckResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RunDeepHealthCheckInput) *deephealth_v1.DeepHealthCheckResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deephealth_v1.DeepHealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RunDeepHealthCheckInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkflowClientInterface_RunDeepHealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunDeepHealthCheck'
type MockWorkflowClientInterface_RunDeepHealthCheck_Call struct {
	*mock.Call
}

// RunDeepHealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *RunDeepHealthCheckInput
func (_e *MockWorkflowClientInterface_Expecter) RunDeepHealthCheck(ctx interface{}, in interface{}) *MockWorkflowClientInterface_RunDeepHealthCheck_Call {
	return &MockWorkflowClientInterface_RunDeepHealthCheck_Call{Call: _e.mock.On("RunDeepHealthCheck", ctx, in)}
}

func (_c *MockWorkflowClientInterface_RunDeepHealthCheck_Call) Run(run func(ctx context.Context, in *RunDeepHealthCheckInput)) *MockWorkflowClientInterface_RunDeepHealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RunDeepHealthCheckInput))
	})
	return _c
}

func (_c *MockWorkflowClientInterface_RunDeepHealthCheck_Call) Return(_a0 *deephealth_v1.DeepHealthCheckResponse, _a1 error) *MockWorkflowClientInterface_RunDeepHealthCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflowClientInterface_RunDeepHealthCheck_Call) RunAndReturn(run func(context.Context, *RunDeepHealthCheckInput) (*deephealth_v1.DeepHealthCheckResponse, error)) *MockWorkflowClientInterface_RunDeepHealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflowClientInterface creates a new instance of MockWorkflowClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflowClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflowClientInterface {
	mock := &MockWorkflowClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
