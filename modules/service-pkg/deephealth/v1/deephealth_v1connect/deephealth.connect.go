// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deephealth/v1/deephealth.proto

package deephealth_v1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/pseudo-su/golang-temporal-service-template/modules/service-pkg/deephealth/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeepHealthName is the fully-qualified name of the DeepHealth service.
	DeepHealthName = "deephealth.v1.DeepHealth"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeepHealthCheckProcedure is the fully-qualified name of the DeepHealth's Check RPC.
	DeepHealthCheckProcedure = "/deephealth.v1.DeepHealth/Check"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deepHealthServiceDescriptor     = v1.File_deephealth_v1_deephealth_proto.Services().ByName("DeepHealth")
	deepHealthCheckMethodDescriptor = deepHealthServiceDescriptor.Methods().ByName("Check")
)

// DeepHealthClient is a client for the deephealth.v1.DeepHealth service.
type DeepHealthClient interface {
	// Checks the health of the service
	// (--
	//
	//	api-linter: core::0136::verb-noun=disabled
	//	api-linter: core::0136::http-uri-suffix=disabled
	//	aip.dev/not-precedent: endpoint should simply be /Health and not verb-noun format
	//
	// --)
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewDeepHealthClient constructs a client for the deephealth.v1.DeepHealth service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeepHealthClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeepHealthClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deepHealthClient{
		check: connect.NewClient[v1.CheckRequest, v1.CheckResponse](
			httpClient,
			baseURL+DeepHealthCheckProcedure,
			connect.WithSchema(deepHealthCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deepHealthClient implements DeepHealthClient.
type deepHealthClient struct {
	check *connect.Client[v1.CheckRequest, v1.CheckResponse]
}

// Check calls deephealth.v1.DeepHealth.Check.
func (c *deepHealthClient) Check(ctx context.Context, req *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// DeepHealthHandler is an implementation of the deephealth.v1.DeepHealth service.
type DeepHealthHandler interface {
	// Checks the health of the service
	// (--
	//
	//	api-linter: core::0136::verb-noun=disabled
	//	api-linter: core::0136::http-uri-suffix=disabled
	//	aip.dev/not-precedent: endpoint should simply be /Health and not verb-noun format
	//
	// --)
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewDeepHealthHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeepHealthHandler(svc DeepHealthHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deepHealthCheckHandler := connect.NewUnaryHandler(
		DeepHealthCheckProcedure,
		svc.Check,
		connect.WithSchema(deepHealthCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deephealth.v1.DeepHealth/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeepHealthCheckProcedure:
			deepHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeepHealthHandler returns CodeUnimplemented from all methods.
type UnimplementedDeepHealthHandler struct{}

func (UnimplementedDeepHealthHandler) Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deephealth.v1.DeepHealth.Check is not implemented"))
}
