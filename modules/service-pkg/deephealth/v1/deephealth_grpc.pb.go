// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: deephealth/v1/deephealth.proto

package deephealth_v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeepHealth_Check_FullMethodName = "/deephealth.v1.DeepHealth/Check"
)

// DeepHealthClient is the client API for DeepHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The deep health service definition.
// buf:lint:ignore SERVICE_SUFFIX
type DeepHealthClient interface {
	// Checks the health of the service
	// (--
	//
	//	api-linter: core::0136::verb-noun=disabled
	//	api-linter: core::0136::http-uri-suffix=disabled
	//	aip.dev/not-precedent: endpoint should simply be /Health and not verb-noun format
	//
	// --)
	Check(ctx context.Context, in *DeepHealthCheckRequest, opts ...grpc.CallOption) (*DeepHealthCheckResponse, error)
}

type deepHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewDeepHealthClient(cc grpc.ClientConnInterface) DeepHealthClient {
	return &deepHealthClient{cc}
}

func (c *deepHealthClient) Check(ctx context.Context, in *DeepHealthCheckRequest, opts ...grpc.CallOption) (*DeepHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeepHealthCheckResponse)
	err := c.cc.Invoke(ctx, DeepHealth_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeepHealthServer is the server API for DeepHealth service.
// All implementations must embed UnimplementedDeepHealthServer
// for forward compatibility
//
// The deep health service definition.
// buf:lint:ignore SERVICE_SUFFIX
type DeepHealthServer interface {
	// Checks the health of the service
	// (--
	//
	//	api-linter: core::0136::verb-noun=disabled
	//	api-linter: core::0136::http-uri-suffix=disabled
	//	aip.dev/not-precedent: endpoint should simply be /Health and not verb-noun format
	//
	// --)
	Check(context.Context, *DeepHealthCheckRequest) (*DeepHealthCheckResponse, error)
	mustEmbedUnimplementedDeepHealthServer()
}

// UnimplementedDeepHealthServer must be embedded to have forward compatible implementations.
type UnimplementedDeepHealthServer struct {
}

func (UnimplementedDeepHealthServer) Check(context.Context, *DeepHealthCheckRequest) (*DeepHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedDeepHealthServer) mustEmbedUnimplementedDeepHealthServer() {}

// UnsafeDeepHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeepHealthServer will
// result in compilation errors.
type UnsafeDeepHealthServer interface {
	mustEmbedUnimplementedDeepHealthServer()
}

func RegisterDeepHealthServer(s grpc.ServiceRegistrar, srv DeepHealthServer) {
	s.RegisterService(&DeepHealth_ServiceDesc, srv)
}

func _DeepHealth_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepHealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepHealth_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepHealthServer).Check(ctx, req.(*DeepHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeepHealth_ServiceDesc is the grpc.ServiceDesc for DeepHealth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeepHealth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deephealth.v1.DeepHealth",
	HandlerType: (*DeepHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _DeepHealth_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deephealth/v1/deephealth.proto",
}
